{"version":3,"sources":["components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/InputSelector/InputSelector.js","images/covid19_logo.png","App.js","reportWebVitals.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justifyContent","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","axios","get","console","error","fetchDailyData","fetchCountries","countries","Chart","useState","dailyData","setDailyData","useEffect","apiData","getDailyData","lineChart","length","labels","map","reportDate","datasets","total","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","InputSelector","handleCountryChange","setCountries","getCountriesFromApi","FormControl","NativeSelect","defaultValue","onChange","e","target","index","name","App","setData","setCountry","fetchDataFromApi","src","covidImage","alt","style","marginBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e6ee505.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Grid, Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport \"./Cards.css\";\r\n\r\nexport default function Cards({\r\n  data: { confirmed, recovered, deaths, lastUpdate },\r\n}) {\r\n  if (!confirmed) {\r\n    return <Typography variant=\"body2\">Loading...</Typography>;\r\n  }\r\n  return (\r\n    <div className=\"card-container\">\r\n      <Grid container spacing={0} justifyContent=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className=\"card infected\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Active\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className=\"card recovered\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className=\"card deaths\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Fatalities\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate }} = await axios.get(!country ? url : `${url}/countries/${country}`);\r\n\treturn {confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries }} = await axios.get(`${url}/countries`);\r\n    return countries;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport \"./Chart.css\";\r\n\r\nexport default function Chart({ data: { confirmed, recovered, deaths }, country }) {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getDailyData = async () => {\r\n      const apiData = await fetchDailyData();\r\n      setDailyData(apiData);\r\n    };\r\n\r\n    getDailyData();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ reportDate }) => reportDate),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed.total),\r\n            label: \"Active\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths.total),\r\n            label: \"Fatalities\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgb(204,51,0)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: ['Active', 'Recovered', 'Fatalities'],\r\n        datasets: [\r\n          {\r\n            label: 'People',\r\n            backgroundColor: ['rgb(255,153,102)', 'rgb(51,153,0)', 'rgb(204,51,0)'],\r\n            data: [confirmed.value, recovered.value, deaths.value]\r\n          }\r\n        ]\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `${country}` }\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return <div className=\"chart-container\">{!country ? lineChart : barChart}</div>;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nexport default function InputSelector({ country, handleCountryChange }) {\r\n\r\n\tconst [countries, setCountries] = useState([]);\r\n\t\r\n\tuseEffect(() => {\r\n\t\tconst getCountriesFromApi = async () => {\r\n\t\t\tconst data = await fetchCountries();\r\n\t\t\tsetCountries(data);\r\n\t\t}\r\n\r\n\t\tgetCountriesFromApi();\r\n\t}, [setCountries])\r\n  return (\r\n\t<FormControl>\r\n\t\t<NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n\t\t\t<option value=\"\">Global</option>\r\n\t\t\t{countries.map((country, index) => (<option value={country.name} key={index}>{country.name}</option>))}\r\n\t\t</NativeSelect>\r\n\t</FormControl>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/covid19_logo.6f84f889.png\";","import \"./App.css\";\nimport { Typography } from \"@material-ui/core\";\nimport { Cards, Chart, InputSelector } from \"./components\";\nimport { useEffect, useState } from \"react\";\nimport { fetchData } from \"./api\";\nimport covidImage from \"./images/covid19_logo.png\";\n\nfunction App() {\n\n  const [data, setData] = useState({});\n  const [country, setCountry] = useState('');\n\n  useEffect(() => {\n    const fetchDataFromApi = async () => {\n      const apiData = await fetchData();\n      setData(apiData)\n    }\n\n    fetchDataFromApi();\n  }, []);\n\n  const handleCountryChange = async (country) => {\n    const apiData = await fetchData(country);\n    setCountry(country);\n    setData(apiData);\n  }\n\n  return (\n    <div className=\"container\">\n      <img className=\"image\" src={covidImage} alt=\"Covid-19\" />\n      <Typography variant=\"h5\" style={{ marginBottom: \"1.5rem\" }}>Covid 19 Tracker</Typography>\n      <InputSelector country={country} handleCountryChange={handleCountryChange} />\n      <Cards data={data} />\n      <Chart data={data} country={country} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}